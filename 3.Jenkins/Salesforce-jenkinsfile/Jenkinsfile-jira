pipeline {
    agent any
    
    environment {
        JIRA_TICKET_ID = 'KAN-1'
        JIRA_SERVER = 'https://anandkumarnew792.atlassian.net/browse/KAN-1'
        JIRA_USERNAME = 'anandkumarnew792@gmail.com'
        JIRA_PASSWORD = 'anand@3006'
    }
    
    stages {
        stage('Check Jira Status') {
            steps {
                script {
                    def jiraAPIUrl = "${env.JIRA_SERVER}/rest/api/latest/issue/${env.JIRA_TICKET_ID}"
                    def response = httpRequest authentication: "${env.JIRA_USERNAME}:${env.JIRA_PASSWORD}", url: jiraAPIUrl
                    
                    def issueStatus = response.data.fields.status.name
                    echo "Jira Ticket Status: ${issueStatus}"
                    
                    if (issueStatus == 'Done') {
                        echo "Jira ticket is done. Triggering the pipeline."
                       sh 'mvn clean install'
                        // Add your pipeline steps here
                    } else {
                        error "Jira ticket is not done yet. Exiting pipeline."
                    }
                }
            }
        }
    }
}



pipeline {
    agent any
    
    stages {
        stage('Check Jira Connection') {
            steps {
                script {
                    def jiraUrl = 'https://anandkumarnew792.atlassian.net'
                    def jiraUsername = 'anandkumarnew792@gmail.com'
                    def jiraPassword = 'anand@3006'
                    
                    echo "Testing connectivity to Jira..."
                    
                    sh "curl -u ${jiraUsername}:${jiraPassword} ${jiraUrl}/rest/api/latest/serverInfo"
                }
            }
        }
    }
}


pipeline {
    agent any
    
    environment {
        JIRA_TICKET_ID = 'KAN-1'
        JIRA_SERVER = 'https://anandkumarnew792.atlassian.net'
        JIRA_USERNAME = 'anandkumarnew792@gmail.com'
        JIRA_PASSWORD = 'anand@3006'
    }
    
    stages {
        stage('Check Jira Status') {
            steps {
                script {
                    def issueStatus = getJiraTicketStatus(env.JIRA_TICKET_ID, env.JIRA_SERVER, env.JIRA_USERNAME, env.JIRA_PASSWORD)
                    echo "Jira Ticket Status: ${issueStatus}"
                    
                    if (issueStatus == 'Done') {
                        echo "Jira ticket is done. Triggering the pipeline..."
                        // Add your pipeline steps here
                    } else {
                        echo "Jira ticket is not done yet. Exiting pipeline."
                    }
                }
            }
        }
    }
}

def getJiraTicketStatus(ticketId, serverUrl, username, password) {
    def issueStatus
    def auth = "${username}:${password}".bytes.encodeBase64().toString()
    def curlCmd = "curl -s -u ${auth} ${serverUrl}/rest/api/latest/issue/${ticketId}"
    def response = sh(script: curlCmd, returnStdout: true).trim()
    
    if (response.contains('"status"')) {
        issueStatus = readJSON text: response, returnPojo: true
        issueStatus = issueStatus.fields.status.name
    } else {
        error "Failed to fetch Jira ticket status. Response: ${response}"
    }
    
    return issueStatus
}





pipeline {
    agent any
    
    environment {
        JIRA_SERVER = 'https://anandkumarnew792.atlassian.net'
        JIRA_USERNAME = 'anandkumarnew792@gmail.com'
        JIRA_PASSWORD = 'anand@3006'
        JIRA_PROJECT_KEY = 'KAN'
    }
    
    stages {
        stage('Create Jira Ticket') {
            steps {
                script {
                    def summary = 'Example Jira Ticket'
                    def description = 'This is an example Jira ticket created from Jenkins pipeline.'
                    def issueType = 'Task' // Adjust the issue type as needed
                    
                    def createdTicket = createJiraTicket(summary, description, issueType)
                    
                    echo "Jira Ticket created with key: ${createdTicket.key}"
                }
            }
        }
    }
}

def createJiraTicket(summary, description, issueType) {
    def auth = "${env.JIRA_USERNAME}:${env.JIRA_PASSWORD}".bytes.encodeBase64().toString()
    def apiUrl = "${env.JIRA_SERVER}/rest/api/latest/issue/"
    
    def jsonBody = """
    {
        "fields": {
            "project": {
                "key": "${env.JIRA_PROJECT_KEY}"
            },
            "summary": "${summary}",
            "description": "${description}",
            "issuetype": {
                "name": "${issueType}"
            }
        }
    }
    """

}
