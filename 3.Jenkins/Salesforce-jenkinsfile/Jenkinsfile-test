pipeline {
    agent any
     parameters{
         booleanParam(name: 'Deploy to fullcode', defaultValue: false, description: 'Deploy to fullcode')
         booleanParam(name: 'Run Apex unit test for fullcode', defaultValue: false, description: 'Run Apex unit test for fullcode')
         booleanParam(name: 'Deploy to only updatedcode', defaultValue: false, description: 'Deploy to only updatedcode')
         booleanParam(name: 'Run Apex unit test for only updatedcode', defaultValue: false, description: 'Run Apex unit test for only updatedcode')
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the Git repository
                script {
                    def gitRepo = 'https://bitbucket.org/vcpl/salesforce-sg-qa/src/integration'
                    def gitBranch = 'devops'
                    def gitCredentialsId = 'dhana-devops-admin' // Replace with the actual credentials ID in Jenkins

                    git branch: gitBranch,
                        credentialsId: gitCredentialsId,
                        url: gitRepo
                }
            }
        }

        stage('Authenticate with Salesforce') {
            steps {
                // Authenticate with your Salesforce org using Salesforce CLI
                sh 'sfdx auth:jwt:grant --clientid 3MVG9N6eDmZRVJOlkThyq5qlkqWZMOfuIO25JydjR7vhj_4MWrIcwaK6mpMK0diNNw5AWpjyz0jK0ZJ2gLLt6 --jwtkeyfile /var/lib/jenkins/openssl/bin/server.key --username mfiflex.code@88trialforce.com.sgvqa --setdefaultdevhubusername --setalias my-hub-org'
            }
        }

            stage('Check for Changes') {
                steps {
                    // Get a list of updated files since the last deployment
                    script {
                        def changedFiles = sh(returnStdout: true, script: "git diff --name-only HEAD^ HEAD")
                        // You can also use git log, git diff-tree, or other Git commands to get the changed files list
                        env.CHANGED_FILES = changedFiles.trim()
                    }
                }
            }

            stage('Deploy to salesforce') {
                when {
                    expression {params.Deploy to fullcode}
                }                
                steps {

                    // Deploy both .cls and .xml files
                    sh "sfdx force:source:deploy -p /var/lib/jenkins/workspace/lesforce-CI-CD-STAGE_integration/force-app/main/default/classes -u my-hub-org"
                }
            }

            stage('Run apex unit test to salesforce') {
                when {
                    expression {
                        return params['Run Apex unit test for fullcode']
                    }
                }
                steps {
                    script {
                        sh "sfdx force:apex:test:run -p /var/lib/jenkins/workspace/lesforce-CI-CD-STAGE_integration/force-app/main/default/classes -u my-hub-org"
                    }
                }
            }

            stage('Generate and Deploy to Salesforce') {
                when {
                    expression {params.Deploy to only updatedcode}
                }                
                steps {
                    script {
                        // Get a list of new .cls files compared to the previous build
                        def newClsFiles = sh(script: 'git diff --name-only HEAD^..HEAD | grep ".cls"', returnStdout: true).trim().split('\n')

                        if (newClsFiles) {

                            newClsFiles.each { clsFile ->
                                // Generate .xml file for the .cls file
                                def xmlFile = clsFile.replaceAll('.cls', '.cls-meta.xml')
                                def xmlFileContent = """
                                <ApexClass xmlns="http://soap.sforce.com/2006/04/metadata">
                                    <apiVersion>52.0</apiVersion>
                                    <status>Active</status>
                                </ApexClass>
                                """
                                writeFile file: xmlFile, text: xmlFileContent

                                // Deploy both .cls and .xml files
                                sh "sfdx force:source:deploy -u my-hub-org --sourcepath ${clsFile},${xmlFile}"
                            }
                        }
                    }
                }
            }

            stage('Run Apex Unit Tests') {
                when {
                    expression {
                        return params['Run Apex unit test for only updatedcode']
                    }
                }       
                steps {
                    script {
                        def affectedClasses = sh(script: "git diff --name-only HEAD^ HEAD | grep '.cls'", returnStdout: true).trim()
                        
                        if (affectedClasses) {
                            echo "Affected .cls files:"
                            echo "${affectedClasses}"
                            
                            // Extract class names from filenames
                            def classNames = affectedClasses.tokenize('\n').collect { it.replaceAll('.*/', '').replaceAll('.cls$', '') }
                            
                            // Run Apex tests for the affected classes
                            sh "sfdx force:apex:test:run -u my-hub-org --synchronous --classnames ${classNames.join(',')}"
                        } else {
                            echo "No .cls files were affected."
                        }
                    }
                }
            }

        }
   }






pipeline {
    agent any

    environment {
        CLIENT_ID = credentials('salesforce-client-id-qa')
        WORKSPACE_PATH = pwd()
        TEST_RUN_ID = ''
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the Git repository
                git branch: 'devops',
                    credentialsId: 'dhana-devops-admin', // Replace with your credentials ID
                    url: 'https://bitbucket.org/vcpl/salesforce-sg-qa/src/integration'
            }
        }

        stage('Authenticate with Salesforce') {
            steps {
                // Authenticate with your Salesforce org using Salesforce CLI
                sh 'sfdx auth:jwt:grant --clientid ${CLIENT_ID} --jwtkeyfile /var/lib/jenkins/openssl/bin/server.key --username mfiflex.code@88trialforce.com.sgvqa --setdefaultdevhubusername --setalias my-hub-org'
            }
        }

        stage('Run testcases Updated metadata') {        
            steps {
                script {
                    // Get the list of recently modified Apex files
                    def recentlyModifiedFiles = sh(script: "git diff --name-only HEAD^..HEAD | grep '.cls\$'", returnStdout: true).trim().split('\n')

                    // Extract class names and corresponding test class names
                    def testClassNames = recentlyModifiedFiles.collect { clsFile ->
                        def className = clsFile.tokenize('/').last().tokenize('.')[0]
                        def testClassName = className + 'TEST'
                        return [className, testClassName]
                    }.flatten().join(',')

                    // Run Apex unit tests with the extracted class names and capture test run ID
                    def output = sh(script: "sfdx force:apex:test:run -c -u my-hub-org --classnames ${testClassNames} --code-coverage", returnStdout: true).trim()
                         
                    // Extract the test run ID
                    def matcher = output =~ /-i\s+(\w+)/
                    if (matcher.find()) {
                        TEST_RUN_ID = matcher.group(1)
                    } else {
                        error "Failed to parse test run ID from the output"
                    }
                }
            }
        }

        stage('Retrieve Test Results') { 
            steps {
                // Retrieve test results using the captured test run ID
                sh "sfdx force:apex:test:report -i ${TEST_RUN_ID} -u mfiflex.code@88trialforce.com.sgvqa"
            }
        }
    }
}
